import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:supabase_flutter/supabase_flutter.dart';
import 'package:go_router/go_router.dart';
import '../../core/services/admin_management_service.dart';
import '../../data/models/admin.dart';
import '../../data/repositories/supervisor_repository.dart';
import '../../data/repositories/report_repository.dart';
import '../../data/repositories/maintenance_repository.dart';

// BLoC Events
abstract class SuperAdminEvent {}

class LoadSuperAdminData extends SuperAdminEvent {}

class CreateNewAdmin extends SuperAdminEvent {
  final String name;
  final String email;
  final String authUserId;

  CreateNewAdmin(
      {required this.name, required this.email, required this.authUserId});
}

class DeleteAdminEvent extends SuperAdminEvent {
  final String adminId;
  DeleteAdminEvent(this.adminId);
}

class AssignSupervisorsToAdmin extends SuperAdminEvent {
  final String adminId;
  final List<String> supervisorIds;

  AssignSupervisorsToAdmin(
      {required this.adminId, required this.supervisorIds});
}

class CreateNewAdminComplete extends SuperAdminEvent {
  final String name;
  final String email;
  final String password;
  final String role;

  CreateNewAdminComplete({
    required this.name,
    required this.email,
    required this.password,
    required this.role,
  });
}

class CreateNewAdminManual extends SuperAdminEvent {
  final String name;
  final String email;
  final String authUserId;
  final String role;

  CreateNewAdminManual({
    required this.name,
    required this.email,
    required this.authUserId,
    required this.role,
  });
}

// BLoC States
abstract class SuperAdminState {}

class SuperAdminInitial extends SuperAdminState {}

class SuperAdminLoading extends SuperAdminState {}

class SuperAdminLoaded extends SuperAdminState {
  final List<Admin> admins;
  final List<Map<String, dynamic>> allSupervisors;
  final Map<String, Map<String, dynamic>> adminStats;
  final List<Map<String, dynamic>> supervisorsWithStats;

  SuperAdminLoaded({
    required this.admins,
    required this.allSupervisors,
    required this.adminStats,
    required this.supervisorsWithStats,
  });
}

class SuperAdminError extends SuperAdminState {
  final String message;
  SuperAdminError(this.message);
}

// BLoC
class SuperAdminBloc extends Bloc<SuperAdminEvent, SuperAdminState> {
  final AdminManagementService _adminService;
  final SupervisorRepository _supervisorRepo;
  final ReportRepository _reportRepo;
  final MaintenanceReportRepository _maintenanceRepo;

  SuperAdminBloc(
    this._adminService,
    this._supervisorRepo,
    this._reportRepo,
    this._maintenanceRepo,
  ) : super(SuperAdminInitial()) {
    on<LoadSuperAdminData>(_onLoadData);
    on<CreateNewAdmin>(_onCreateAdmin);
    on<DeleteAdminEvent>(_onDeleteAdmin);
    on<AssignSupervisorsToAdmin>(_onAssignSupervisors);
    on<CreateNewAdminComplete>(_onCreateAdminComplete);
    on<CreateNewAdminManual>(_onCreateAdminManual);
  }

  Future<void> _onLoadData(
      LoadSuperAdminData event, Emitter<SuperAdminState> emit) async {
    emit(SuperAdminLoading());
    try {
      // Load all admins
      final admins = await _adminService.getAllAdmins();

      // Load all supervisors
      final allSupervisors = await _supervisorRepo.fetchSupervisors();
      final supervisorsMap = allSupervisors
          .map((s) => {
                'id': s.id,
                'username': s.username,
                'email': s.email,
                'admin_id': s.adminId,
              })
          .toList();

      // Load supervisors with individual statistics
      final supervisorsWithStats =
          await _adminService.getAllSupervisorsWithStats();

      // Calculate stats for each admin
      final Map<String, Map<String, dynamic>> adminStats = {};

      for (final admin in admins) {
        final stats = await _adminService.getAdminStats(admin.id);
        adminStats[admin.id] = stats;
      }

      emit(SuperAdminLoaded(
        admins: admins,
        allSupervisors: supervisorsMap,
        adminStats: adminStats,
        supervisorsWithStats: supervisorsWithStats,
      ));
    } catch (e) {
      emit(SuperAdminError(e.toString()));
    }
  }

  Future<void> _onCreateAdmin(
      CreateNewAdmin event, Emitter<SuperAdminState> emit) async {
    try {
      await _adminService.createAdmin(
        name: event.name,
        email: event.email,
        authUserId: event.authUserId,
      );
      add(LoadSuperAdminData());
    } catch (e) {
      emit(SuperAdminError(e.toString()));
    }
  }

  Future<void> _onDeleteAdmin(
      DeleteAdminEvent event, Emitter<SuperAdminState> emit) async {
    try {
      await _adminService.deleteAdmin(event.adminId);
      add(LoadSuperAdminData());
    } catch (e) {
      emit(SuperAdminError(e.toString()));
    }
  }

  Future<void> _onAssignSupervisors(
      AssignSupervisorsToAdmin event, Emitter<SuperAdminState> emit) async {
    try {
      await _adminService.assignSupervisorsToAdmin(
        adminId: event.adminId,
        supervisorIds: event.supervisorIds,
      );
      add(LoadSuperAdminData());
    } catch (e) {
      emit(SuperAdminError(e.toString()));
    }
  }

  Future<void> _onCreateAdminComplete(
      CreateNewAdminComplete event, Emitter<SuperAdminState> emit) async {
    try {
      await _adminService.createAdminWithAuth(
        name: event.name,
        email: event.email,
        password: event.password,
        role: event.role,
      );
      add(LoadSuperAdminData());
    } catch (e) {
      emit(SuperAdminError(e.toString()));
    }
  }

  Future<void> _onCreateAdminManual(
      CreateNewAdminManual event, Emitter<SuperAdminState> emit) async {
    try {
      await _adminService.createAdmin(
        name: event.name,
        email: event.email,
        authUserId: event.authUserId,
        role: event.role,
      );
      add(LoadSuperAdminData());
    } catch (e) {
      emit(SuperAdminError(e.toString()));
    }
  }
}

// Main Screen
class SuperAdminDashboardScreen extends StatelessWidget {
  const SuperAdminDashboardScreen({super.key});

  @override
  Widget build(BuildContext context) {
    final supabase = Supabase.instance.client;

    return BlocProvider(
      create: (context) => SuperAdminBloc(
        AdminManagementService(supabase),
        SupervisorRepository(supabase),
        ReportRepository(supabase),
        MaintenanceReportRepository(supabase),
      )..add(LoadSuperAdminData()),
      child: const _SuperAdminDashboardView(),
    );
  }
}

class _SuperAdminDashboardView extends StatelessWidget {
  const _SuperAdminDashboardView();

  @override
  Widget build(BuildContext context) {
    return Directionality(
      textDirection: TextDirection.rtl,
      child: Scaffold(
        body: Container(
          decoration: BoxDecoration(
            gradient: LinearGradient(
              begin: Alignment.topCenter,
              end: Alignment.bottomCenter,
              colors: Theme.of(context).brightness == Brightness.dark
                  ? [
                      const Color(0xFF0F172A),
                      const Color(0xFF1E293B),
                    ]
                  : [
                      const Color(0xFFF8FAFC),
                      const Color(0xFFF1F5F9),
                    ],
            ),
          ),
          child: BlocBuilder<SuperAdminBloc, SuperAdminState>(
            builder: (context, state) {
              if (state is SuperAdminLoading) {
                return _buildLoadingView();
              } else if (state is SuperAdminError) {
                return _buildErrorView(context, state.message);
              } else if (state is SuperAdminLoaded) {
                return _buildDashboardContent(context, state);
              }
              return _buildWelcomeView();
            },
          ),
        ),
      ),
    );
  }

  Widget _buildLoadingView() {
    return const Center(
      child: Column(
        mainAxisAlignment: MainAxisAlignment.center,
        children: [
          CircularProgressIndicator(
            valueColor: AlwaysStoppedAnimation<Color>(Color(0xFF6B46C1)),
          ),
          SizedBox(height: 16),
          Text(
            'جاري تحميل البيانات...',
            style: TextStyle(
              fontSize: 16,
              color: Color(0xFF64748B),
              fontWeight: FontWeight.w500,
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildWelcomeView() {
    return const Center(
      child: Column(
        mainAxisAlignment: MainAxisAlignment.center,
        children: [
          Icon(
            Icons.admin_panel_settings_rounded,
            size: 80,
            color: Color(0xFF6B46C1),
          ),
          SizedBox(height: 16),
          Text(
            'مرحباً بك في لوحة المدير العام',
            style: TextStyle(
              fontSize: 24,
              fontWeight: FontWeight.bold,
              color: Color(0xFF1E293B),
            ),
          ),
          SizedBox(height: 8),
          Text(
            'إدارة شاملة للمسؤولين والمشرفين',
            style: TextStyle(
              fontSize: 16,
              color: Color(0xFF64748B),
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildErrorView(BuildContext context, String message) {
    return Center(
      child: Container(
        margin: const EdgeInsets.all(32),
        padding: const EdgeInsets.all(24),
        decoration: BoxDecoration(
          borderRadius: BorderRadius.circular(20),
          color: Colors.white,
          boxShadow: [
            BoxShadow(
              color: Colors.red.withOpacity(0.1),
              blurRadius: 20,
              offset: const Offset(0, 8),
            ),
          ],
        ),
        child: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            Container(
              padding: const EdgeInsets.all(16),
              decoration: BoxDecoration(
                color: Colors.red.withOpacity(0.1),
                borderRadius: BorderRadius.circular(12),
              ),
              child: Icon(
                Icons.error_outline_rounded,
                size: 48,
                color: Colors.red[600],
              ),
            ),
            const SizedBox(height: 16),
            Text(
              'حدث خطأ',
              style: TextStyle(
                fontSize: 20,
                fontWeight: FontWeight.bold,
                color: Colors.red[600],
              ),
            ),
            const SizedBox(height: 8),
            Text(
              message,
              textAlign: TextAlign.center,
              style: const TextStyle(
                fontSize: 14,
                color: Color(0xFF64748B),
              ),
            ),
            const SizedBox(height: 24),
            ElevatedButton.icon(
              onPressed: () =>
                  context.read<SuperAdminBloc>().add(LoadSuperAdminData()),
              icon: const Icon(Icons.refresh_rounded),
              label: const Text('إعادة المحاولة'),
              style: ElevatedButton.styleFrom(
                backgroundColor: const Color(0xFF6B46C1),
                foregroundColor: Colors.white,
                padding:
                    const EdgeInsets.symmetric(horizontal: 24, vertical: 12),
                shape: RoundedRectangleBorder(
                  borderRadius: BorderRadius.circular(12),
                ),
              ),
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildDashboardContent(BuildContext context, SuperAdminLoaded state) {
    return SingleChildScrollView(
      padding: const EdgeInsets.all(16),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          // Header Section
          _buildHeader(context),
          const SizedBox(height: 20),

          // Overview Statistics
          _buildOverviewSection(context, state),
          const SizedBox(height: 24),

          // Supervisor Assignment Section
          // _buildSupervisorAssignmentSection(context, state),
        ],
      ),
    );
  }

  Widget _buildHeader(BuildContext context) {
    return Container(
      padding: const EdgeInsets.all(20),
      decoration: BoxDecoration(
        borderRadius: BorderRadius.circular(16),
        gradient: LinearGradient(
          begin: Alignment.topLeft,
          end: Alignment.bottomRight,
          colors: [
            const Color(0xFF6B46C1).withOpacity(0.1),
            const Color(0xFF8B5CF6).withOpacity(0.05),
          ],
        ),
        border: Border.all(
          color: const Color(0xFF6B46C1).withOpacity(0.2),
          width: 1,
        ),
      ),
      child: Row(
        children: [
          Container(
            padding: const EdgeInsets.all(16),
            decoration: BoxDecoration(
              color: const Color(0xFF6B46C1).withOpacity(0.1),
              borderRadius: BorderRadius.circular(16),
            ),
            child: const Icon(
              Icons.admin_panel_settings_rounded,
              size: 24,
              color: Color(0xFF6B46C1),
            ),
          ),
          const SizedBox(width: 16),
          Expanded(
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Text(
                  'لوحة تحكم المدير العام',
                  style: Theme.of(context).textTheme.titleLarge?.copyWith(
                        fontWeight: FontWeight.w700,
                        color: const Color(0xFF1E293B),
                        fontSize: 20,
                      ),
                ),
                const SizedBox(height: 4),
                Text(
                  'إدارة شاملة للمسؤولين والمشرفين والصلاحيات',
                  style: Theme.of(context).textTheme.bodyMedium?.copyWith(
                        color: const Color(0xFF64748B),
                        fontSize: 14,
                      ),
                ),
              ],
            ),
          ),
          _buildActionButtons(context),
        ],
      ),
    );
  }

  Widget _buildActionButtons(BuildContext context) {
    return Row(
      children: [
        _buildActionButton(
          context,
          Icons.logout_rounded,
          'تسجيل الخروج',
          const Color(0xFFEF4444),
          () => _logout(context),
        ),
      ],
    );
  }

  Widget _buildActionButton(
    BuildContext context,
    IconData icon,
    String tooltip,
    Color color,
    VoidCallback onPressed,
  ) {
    return Container(
      decoration: BoxDecoration(
        borderRadius: BorderRadius.circular(12),
        gradient: LinearGradient(
          begin: Alignment.topLeft,
          end: Alignment.bottomRight,
          colors: [
            color.withOpacity(0.1),
            color.withOpacity(0.05),
          ],
        ),
        border: Border.all(
          color: color.withOpacity(0.2),
          width: 1,
        ),
      ),
      child: Material(
        color: Colors.transparent,
        child: InkWell(
          onTap: onPressed,
          borderRadius: BorderRadius.circular(12),
          child: Padding(
            padding: const EdgeInsets.all(12),
            child: Tooltip(
              message: tooltip,
              child: Icon(
                icon,
                color: color,
                size: 20,
              ),
            ),
          ),
        ),
      ),
    );
  }

  void _showCreateAdminDialog(BuildContext context) {
    showDialog(
      context: context,
      builder: (dialogContext) => BlocProvider.value(
        value: context.read<SuperAdminBloc>(),
        child: const _CreateAdminDialog(),
      ),
    );
  }

  void _logout(BuildContext context) {
    showDialog(
      context: context,
      builder: (ctx) => AlertDialog(
        title: const Text('تسجيل الخروج'),
        content: const Text('هل أنت متأكد من تسجيل الخروج؟'),
        actions: [
          TextButton(
            onPressed: () => Navigator.of(ctx).pop(),
            child: const Text('إلغاء'),
          ),
          TextButton(
            onPressed: () async {
              await Supabase.instance.client.auth.signOut();
              Navigator.of(ctx).pop();
              context.go('/auth');
            },
            style: TextButton.styleFrom(foregroundColor: Colors.red),
            child: const Text('تسجيل الخروج'),
          ),
        ],
      ),
    );
  }

  Widget _buildOverviewSection(BuildContext context, SuperAdminLoaded state) {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        // Overall System Statistics
        _buildSystemStatistics(context, state),
        const SizedBox(height: 24),

        // Admin Performance Analytics
        _buildAdminAnalytics(context, state),
        const SizedBox(height: 24),

        // Supervisor Performance Analytics
        _buildSupervisorAnalytics(context, state),
        const SizedBox(height: 24),
      ],
    );
  }

  Widget _buildSystemStatistics(BuildContext context, SuperAdminLoaded state) {
    final totalAdmins = state.admins.length;
    final totalSupervisors = state.allSupervisors.length;
    final assignedSupervisors =
        state.allSupervisors.where((s) => s['admin_id'] != null).length;
    final unassignedSupervisors = totalSupervisors - assignedSupervisors;

    // Calculate total reports and maintenance across all supervisors
    int totalReports = 0;
    int totalMaintenance = 0;
    int completedReports = 0;
    int completedMaintenance = 0;

    for (final admin in state.admins) {
      final stats = state.adminStats[admin.id];
      if (stats != null) {
        totalReports += (stats['reports'] as int? ?? 0);
        totalMaintenance += (stats['maintenance'] as int? ?? 0);
        completedReports += (stats['completed_reports'] as int? ?? 0);
        completedMaintenance += (stats['completed_maintenance'] as int? ?? 0);
      }
    }

    final totalWork = totalReports + totalMaintenance;
    final completedWork = completedReports + completedMaintenance;
    final systemCompletionRate =
        totalWork > 0 ? (completedWork / totalWork * 100) : 0.0;

    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Text(
          'إحصائيات النظام العامة',
          style: Theme.of(context).textTheme.titleMedium?.copyWith(
                fontWeight: FontWeight.w600,
                fontSize: 16,
                color: Theme.of(context).brightness == Brightness.dark
                    ? Colors.white
                    : const Color(0xFF334155),
                letterSpacing: -0.1,
              ),
        ),
        const SizedBox(height: 12),
        LayoutBuilder(
          builder: (context, constraints) {
            final crossAxisCount = constraints.maxWidth > 1400
                ? 6
                : constraints.maxWidth > 1000
                    ? 4
                    : constraints.maxWidth > 600
                        ? 3
                        : 2;

            return GridView.count(
              shrinkWrap: true,
              physics: const NeverScrollableScrollPhysics(),
              crossAxisCount: crossAxisCount,
              mainAxisSpacing: 16,
              crossAxisSpacing: 16,
              childAspectRatio: 2.2,
              children: [
                _buildModernStatsCard(
                  'إجمالي المسؤولين',
                  totalAdmins,
                  Icons.admin_panel_settings_outlined,
                  const Color(0xFF3B82F6),
                  () => context.go('/admins'),
                ),
                _buildModernStatsCard(
                  'إجمالي المشرفين',
                  totalSupervisors,
                  Icons.supervisor_account_outlined,
                  const Color(0xFF10B981),
                  () => context.go('/supervisors'),
                ),
                _buildModernStatsCard(
                  'إجمالي البلاغات',
                  totalReports,
                  Icons.report_outlined,
                  const Color(0xFFF59E0B),
                  () => context.go('/reports?title=جميع البلاغات في النظام'),
                ),
                _buildModernStatsCard(
                  'إجمالي الصيانة',
                  totalMaintenance,
                  Icons.build_outlined,
                  const Color(0xFFEF4444),
                  () => context.go(
                      '/maintenance-reports?title=جميع بلاغات الصيانة في النظام'),
                ),
                _buildProgressStatsCard(
                  'معدل الإنجاز العام',
                  systemCompletionRate,
                  Icons.trending_up_outlined,
                  const Color(0xFF8B5CF6),
                ),
                _buildModernStatsCard(
                  'المشرفين غير المُعيّنين',
                  unassignedSupervisors,
                  Icons.person_outline,
                  const Color(0xFF64748B),
                  () => context.go('/supervisors'),
                ),
              ],
            );
          },
        ),
      ],
    );
  }

  Widget _buildAdminAnalytics(BuildContext context, SuperAdminLoaded state) {
    final regularAdmins = state.admins.where((a) => a.role == 'admin').toList();

    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Row(
          children: [
            Icon(
              Icons.analytics_outlined,
              color: const Color(0xFF3B82F6),
              size: 20,
            ),
            const SizedBox(width: 8),
            Text(
              'تحليلات أداء المسؤولين',
              style: Theme.of(context).textTheme.titleMedium?.copyWith(
                    fontWeight: FontWeight.w600,
                    fontSize: 16,
                    color: Theme.of(context).brightness == Brightness.dark
                        ? Colors.white
                        : const Color(0xFF334155),
                  ),
            ),
          ],
        ),
        const SizedBox(height: 16),
        if (regularAdmins.isEmpty)
          Container(
            padding: const EdgeInsets.all(24),
            decoration: BoxDecoration(
              borderRadius: BorderRadius.circular(12),
              color: Theme.of(context).brightness == Brightness.dark
                  ? const Color(0xFF1E293B)
                  : const Color(0xFFF8FAFC),
              border: Border.all(color: const Color(0xFFE2E8F0)),
            ),
            child: const Center(
              child: Text('لا يوجد مسؤولين لعرض التحليلات'),
            ),
          )
        else
          Container(
            decoration: BoxDecoration(
              borderRadius: BorderRadius.circular(16),
              color: Theme.of(context).brightness == Brightness.dark
                  ? const Color(0xFF1E293B)
                  : Colors.white,
              border: Border.all(
                color: const Color(0xFFE2E8F0),
              ),
              boxShadow: [
                BoxShadow(
                  color: Colors.black.withOpacity(0.05),
                  blurRadius: 10,
                  offset: const Offset(0, 4),
                ),
              ],
            ),
            child: Column(
              children: [
                Container(
                  padding: const EdgeInsets.all(16),
                  decoration: const BoxDecoration(
                    borderRadius: BorderRadius.only(
                      topLeft: Radius.circular(16),
                      topRight: Radius.circular(16),
                    ),
                    gradient: LinearGradient(
                      colors: [Color(0xFF3B82F6), Color(0xFF1D4ED8)],
                    ),
                  ),
                  child: Row(
                    children: [
                      const Icon(Icons.person, color: Colors.white, size: 18),
                      const SizedBox(width: 8),
                      const Text(
                        'أداء المسؤولين',
                        style: TextStyle(
                          color: Colors.white,
                          fontWeight: FontWeight.w600,
                          fontSize: 14,
                        ),
                      ),
                      const Spacer(),
                      Container(
                        padding: const EdgeInsets.symmetric(
                            horizontal: 8, vertical: 4),
                        decoration: BoxDecoration(
                          color: Colors.white.withOpacity(0.2),
                          borderRadius: BorderRadius.circular(8),
                        ),
                        child: Text(
                          '${regularAdmins.length} مسؤول',
                          style: const TextStyle(
                            color: Colors.white,
                            fontSize: 12,
                            fontWeight: FontWeight.w500,
                          ),
                        ),
                      ),
                    ],
                  ),
                ),
                ListView.separated(
                  shrinkWrap: true,
                  physics: const NeverScrollableScrollPhysics(),
                  padding: const EdgeInsets.all(16),
                  itemCount: regularAdmins.length,
                  separatorBuilder: (context, index) =>
                      const SizedBox(height: 12),
                  itemBuilder: (context, index) {
                    final admin = regularAdmins[index];
                    final stats =
                        state.adminStats[admin.id] ?? <String, dynamic>{};
                    return _buildAdminPerformanceCard(context, admin, stats);
                  },
                ),
              ],
            ),
          ),
      ],
    );
  }

  Widget _buildSupervisorAnalytics(
      BuildContext context, SuperAdminLoaded state) {
    return Container(
      padding: const EdgeInsets.all(20),
      decoration: BoxDecoration(
        borderRadius: BorderRadius.circular(16),
        gradient: LinearGradient(
          begin: Alignment.topLeft,
          end: Alignment.bottomRight,
          colors: Theme.of(context).brightness == Brightness.dark
              ? [
                  const Color(0xFF1E293B).withOpacity(0.9),
                  const Color(0xFF1E293B).withOpacity(0.7),
                ]
              : [
                  Colors.white.withOpacity(0.9),
                  Colors.white.withOpacity(0.7),
                ],
        ),
        border: Border.all(
          color: Colors.white.withOpacity(0.2),
          width: 1.5,
        ),
        boxShadow: [
          BoxShadow(
            color: const Color(0xFF1E293B).withOpacity(0.1),
            blurRadius: 20,
            offset: const Offset(0, 8),
          ),
        ],
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Row(
            children: [
              Container(
                padding: const EdgeInsets.all(10),
                decoration: BoxDecoration(
                  gradient: LinearGradient(
                    begin: Alignment.topLeft,
                    end: Alignment.bottomRight,
                    colors: [
                      const Color(0xFF10B981).withOpacity(0.2),
                      const Color(0xFF059669).withOpacity(0.1),
                    ],
                  ),
                  borderRadius: BorderRadius.circular(12),
                  border: Border.all(
                    color: const Color(0xFF10B981).withOpacity(0.3),
                    width: 1,
                  ),
                ),
                child: const Icon(
                  Icons.people_rounded,
                  color: Color(0xFF10B981),
                  size: 20,
                ),
              ),
              const SizedBox(width: 12),
              Expanded(
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Text(
                      'أداء المشرفين الفردي',
                      style: Theme.of(context).textTheme.titleSmall?.copyWith(
                            fontWeight: FontWeight.w700,
                            fontSize: 15,
                            color: const Color(0xFF10B981),
                            letterSpacing: -0.2,
                          ),
                    ),
                    Text(
                      'إحصائيات كل مشرف على حدة',
                      style: Theme.of(context).textTheme.bodySmall?.copyWith(
                            fontSize: 12,
                            color: const Color(0xFF64748B),
                            fontWeight: FontWeight.w500,
                          ),
                    ),
                  ],
                ),
              ),
            ],
          ),
          const SizedBox(height: 20),
          if (state.supervisorsWithStats.isEmpty)
            _buildEmptyStateCard(
              'لا يوجد مشرفين',
              'ابدأ بإضافة مشرفين لمراقبة أدائهم',
              Icons.person_add_outlined,
              const Color(0xFF10B981),
            )
          else
            LayoutBuilder(
              builder: (context, constraints) {
                final crossAxisCount = constraints.maxWidth > 1200
                    ? 3
                    : constraints.maxWidth > 800
                        ? 2
                        : 1;

                return GridView.builder(
                  shrinkWrap: true,
                  physics: const NeverScrollableScrollPhysics(),
                  gridDelegate: SliverGridDelegateWithFixedCrossAxisCount(
                    crossAxisCount: crossAxisCount,
                    mainAxisSpacing: 16,
                    crossAxisSpacing: 16,
                    childAspectRatio: 1.8,
                  ),
                  itemCount: state.supervisorsWithStats.length,
                  itemBuilder: (context, index) {
                    final supervisor = state.supervisorsWithStats[index];
                    return _buildSupervisorPerformanceCard(context, supervisor);
                  },
                );
              },
            ),
        ],
      ),
    );
  }

  Widget _buildSupervisorPerformanceCard(
      BuildContext context, Map<String, dynamic> supervisor) {
    final stats = supervisor['stats'] as Map<String, dynamic>;
    final username = supervisor['username'] as String? ?? 'غير محدد';
    final email = supervisor['email'] as String? ?? '';
    final adminId = supervisor['admin_id'] as String?;

    final totalReports = stats['reports'] as int? ?? 0;
    final totalMaintenance = stats['maintenance'] as int? ?? 0;
    final completedReports = stats['completed_reports'] as int? ?? 0;
    final completedMaintenance = stats['completed_maintenance'] as int? ?? 0;
    final completionRate = stats['completion_rate'] as double? ?? 0.0;

    final totalWork = totalReports + totalMaintenance;
    final completedWork = completedReports + completedMaintenance;

    return Container(
      padding: const EdgeInsets.all(16),
      decoration: BoxDecoration(
        borderRadius: BorderRadius.circular(12),
        border: Border.all(color: const Color(0xFFE2E8F0)),
        color: Theme.of(context).brightness == Brightness.dark
            ? const Color(0xFF334155)
            : const Color(0xFFF8FAFC),
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Row(
            children: [
              Container(
                width: 36,
                height: 36,
                decoration: BoxDecoration(
                  borderRadius: BorderRadius.circular(10),
                  gradient: const LinearGradient(
                    colors: [Color(0xFF10B981), Color(0xFF059669)],
                  ),
                ),
                child: const Icon(
                  Icons.person,
                  color: Colors.white,
                  size: 18,
                ),
              ),
              const SizedBox(width: 12),
              Expanded(
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Text(
                      username,
                      style: const TextStyle(
                        fontWeight: FontWeight.w600,
                        fontSize: 14,
                      ),
                      maxLines: 1,
                      overflow: TextOverflow.ellipsis,
                    ),
                    if (email.isNotEmpty)
                      Text(
                        email,
                        style: const TextStyle(
                          fontSize: 11,
                          color: Color(0xFF64748B),
                        ),
                        maxLines: 1,
                        overflow: TextOverflow.ellipsis,
                      ),
                  ],
                ),
              ),
              Container(
                padding: const EdgeInsets.symmetric(horizontal: 8, vertical: 4),
                decoration: BoxDecoration(
                  borderRadius: BorderRadius.circular(6),
                  color: _getCompletionRateColor(completionRate * 100)
                      .withOpacity(0.1),
                ),
                child: Text(
                  '${(completionRate * 100).toStringAsFixed(0)}%',
                  style: TextStyle(
                    fontSize: 12,
                    fontWeight: FontWeight.w600,
                    color: _getCompletionRateColor(completionRate * 100),
                  ),
                ),
              ),
            ],
          ),
          const SizedBox(height: 8),

          // Assignment status
          Container(
            padding: const EdgeInsets.symmetric(horizontal: 6, vertical: 2),
            decoration: BoxDecoration(
              borderRadius: BorderRadius.circular(4),
              color: adminId != null
                  ? const Color(0xFF10B981).withOpacity(0.1)
                  : const Color(0xFFF59E0B).withOpacity(0.1),
            ),
            child: Text(
              adminId != null ? 'مُعيّن' : 'غير مُعيّن',
              style: TextStyle(
                fontSize: 10,
                fontWeight: FontWeight.w500,
                color: adminId != null
                    ? const Color(0xFF10B981)
                    : const Color(0xFFF59E0B),
              ),
            ),
          ),

          const SizedBox(height: 12),
          Row(
            children: [
              _buildMiniStatCard(
                  'بلاغات', totalReports, const Color(0xFF3B82F6)),
              const SizedBox(width: 8),
              _buildMiniStatCard(
                  'صيانة', totalMaintenance, const Color(0xFFEF4444)),
              const SizedBox(width: 8),
              _buildMiniStatCard(
                  'مكتمل', completedWork, const Color(0xFF10B981)),
            ],
          ),
        ],
      ),
    );
  }

  Widget _buildProgressStatsCard(
      String label, double percentage, IconData icon, Color color) {
    return StatefulBuilder(
      builder: (context, setState) {
        bool isHovered = false;

        return MouseRegion(
          onEnter: (_) => setState(() => isHovered = true),
          onExit: (_) => setState(() => isHovered = false),
          child: AnimatedContainer(
            duration: const Duration(milliseconds: 200),
            transform: Matrix4.identity()..scale(isHovered ? 1.02 : 1.0),
            decoration: BoxDecoration(
              borderRadius: BorderRadius.circular(20),
              gradient: LinearGradient(
                begin: Alignment.topLeft,
                end: Alignment.bottomRight,
                colors: Theme.of(context).brightness == Brightness.dark
                    ? [
                        const Color(0xFF1E293B).withOpacity(0.9),
                        const Color(0xFF1E293B).withOpacity(0.7),
                      ]
                    : [
                        Colors.white.withOpacity(0.9),
                        Colors.white.withOpacity(0.7),
                      ],
              ),
              border: Border.all(
                color: isHovered
                    ? color.withOpacity(0.3)
                    : Colors.white.withOpacity(0.2),
                width: 1.5,
              ),
              boxShadow: [
                BoxShadow(
                  color: color.withOpacity(isHovered ? 0.15 : 0.08),
                  blurRadius: isHovered ? 16 : 10,
                  offset: const Offset(0, 6),
                  spreadRadius: 0,
                ),
              ],
            ),
            child: Container(
              padding: const EdgeInsets.all(20),
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  Row(
                    mainAxisAlignment: MainAxisAlignment.spaceBetween,
                    children: [
                      Container(
                        width: 40,
                        height: 40,
                        decoration: BoxDecoration(
                          borderRadius: BorderRadius.circular(12),
                          gradient: LinearGradient(
                            begin: Alignment.topLeft,
                            end: Alignment.bottomRight,
                            colors: [
                              color.withOpacity(0.2),
                              color.withOpacity(0.1),
                            ],
                          ),
                          border: Border.all(
                            color: color.withOpacity(0.2),
                            width: 1,
                          ),
                        ),
                        child: Icon(
                          icon,
                          color: color,
                          size: 20,
                        ),
                      ),
                      AnimatedContainer(
                        duration: const Duration(milliseconds: 200),
                        child: Icon(
                          Icons.arrow_outward_rounded,
                          color: color.withOpacity(isHovered ? 1.0 : 0.6),
                          size: 16,
                        ),
                      ),
                    ],
                  ),
                  const Spacer(),
                  Text(
                    '${percentage.toStringAsFixed(1)}%',
                    style: Theme.of(context).textTheme.titleLarge?.copyWith(
                          fontWeight: FontWeight.w700,
                          fontSize: 24,
                          color: Theme.of(context).brightness == Brightness.dark
                              ? const Color(0xFFF1F5F9)
                              : const Color(0xFF1E293B),
                          letterSpacing: -0.6,
                          height: 1.1,
                        ),
                  ),
                  const SizedBox(height: 4),
                  Text(
                    label,
                    style: Theme.of(context).textTheme.bodySmall?.copyWith(
                          color: Theme.of(context).brightness == Brightness.dark
                              ? const Color(0xFF94A3B8)
                              : const Color(0xFF64748B),
                          fontWeight: FontWeight.w500,
                          height: 1.2,
                        ),
                    maxLines: 2,
                    overflow: TextOverflow.ellipsis,
                  ),
                ],
              ),
            ),
          ),
        );
      },
    );
  }

  Widget _buildAdminPerformanceCard(
      BuildContext context, Admin admin, Map<String, dynamic> stats) {
    final supervisorCount = stats['supervisors'] as int? ?? 0;
    final totalReports = stats['reports'] as int? ?? 0;
    final totalMaintenance = stats['maintenance'] as int? ?? 0;
    final completedReports = stats['completed_reports'] as int? ?? 0;
    final completedMaintenance = stats['completed_maintenance'] as int? ?? 0;

    final totalWork = totalReports + totalMaintenance;
    final completedWork = completedReports + completedMaintenance;
    final completionRate = totalWork > 0 ? (completedWork / totalWork) : 0.0;

    return Container(
      padding: const EdgeInsets.all(16),
      decoration: BoxDecoration(
        borderRadius: BorderRadius.circular(12),
        border: Border.all(color: const Color(0xFFE2E8F0)),
        color: Theme.of(context).brightness == Brightness.dark
            ? const Color(0xFF334155)
            : const Color(0xFFF8FAFC),
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Row(
            children: [
              Container(
                width: 36,
                height: 36,
                decoration: BoxDecoration(
                  borderRadius: BorderRadius.circular(10),
                  gradient: const LinearGradient(
                    colors: [Color(0xFF3B82F6), Color(0xFF1D4ED8)],
                  ),
                ),
                child: const Icon(
                  Icons.person,
                  color: Colors.white,
                  size: 18,
                ),
              ),
              const SizedBox(width: 12),
              Expanded(
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Text(
                      admin.name,
                      style: const TextStyle(
                        fontWeight: FontWeight.w600,
                        fontSize: 14,
                      ),
                    ),
                    Text(
                      admin.email,
                      style: const TextStyle(
                        fontSize: 12,
                        color: Color(0xFF64748B),
                      ),
                    ),
                  ],
                ),
              ),
              Container(
                padding: const EdgeInsets.symmetric(horizontal: 8, vertical: 4),
                decoration: BoxDecoration(
                  borderRadius: BorderRadius.circular(6),
                  color:
                      _getCompletionRateColor(completionRate).withOpacity(0.1),
                ),
                child: Text(
                  '${(completionRate * 100).toStringAsFixed(0)}%',
                  style: TextStyle(
                    fontSize: 12,
                    fontWeight: FontWeight.w600,
                    color: _getCompletionRateColor(completionRate * 100),
                  ),
                ),
              ),
            ],
          ),
          const SizedBox(height: 12),
          Row(
            children: [
              _buildMiniStatCard(
                  'مشرفين', supervisorCount, const Color(0xFF10B981)),
              const SizedBox(width: 8),
              _buildMiniStatCard(
                  'بلاغات', totalReports, const Color(0xFFF59E0B)),
              const SizedBox(width: 8),
              _buildMiniStatCard(
                  'صيانة', totalMaintenance, const Color(0xFFEF4444)),
            ],
          ),
        ],
      ),
    );
  }

  Widget _buildSupervisorStatsCard(String label, int count, Color color) {
    return Container(
      padding: const EdgeInsets.all(16),
      decoration: BoxDecoration(
        borderRadius: BorderRadius.circular(12),
        border: Border.all(color: color.withOpacity(0.2)),
        color: color.withOpacity(0.05),
      ),
      child: Column(
        children: [
          Icon(
            Icons.people_outline,
            color: color,
            size: 24,
          ),
          const SizedBox(height: 8),
          Text(
            '$count',
            style: TextStyle(
              fontSize: 20,
              fontWeight: FontWeight.w700,
              color: color,
            ),
          ),
          const SizedBox(height: 4),
          Text(
            label,
            style: TextStyle(
              fontSize: 12,
              color: color,
              fontWeight: FontWeight.w500,
            ),
            textAlign: TextAlign.center,
          ),
        ],
      ),
    );
  }

  Widget _buildWorkloadDistribution(
      BuildContext context, SuperAdminLoaded state) {
    final regularAdmins = state.admins.where((a) => a.role == 'admin').toList();

    return Container(
      padding: const EdgeInsets.all(20),
      decoration: BoxDecoration(
        borderRadius: BorderRadius.circular(16),
        color: Theme.of(context).brightness == Brightness.dark
            ? const Color(0xFF1E293B)
            : Colors.white,
        border: Border.all(color: const Color(0xFFE2E8F0)),
        boxShadow: [
          BoxShadow(
            color: Colors.black.withOpacity(0.05),
            blurRadius: 10,
            offset: const Offset(0, 4),
          ),
        ],
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Text(
            'توزيع حجم العمل',
            style: Theme.of(context).textTheme.titleMedium?.copyWith(
                  fontWeight: FontWeight.w600,
                  fontSize: 14,
                ),
          ),
          const SizedBox(height: 16),
          if (regularAdmins.isEmpty)
            const Center(
              child: Text(
                'لا يوجد مسؤولين',
                style: TextStyle(color: Color(0xFF64748B)),
              ),
            )
          else
            ...regularAdmins.map((admin) {
              final stats = state.adminStats[admin.id] ?? <String, dynamic>{};
              final totalWork = (stats['reports'] as int? ?? 0) +
                  (stats['maintenance'] as int? ?? 0);
              return Padding(
                padding: const EdgeInsets.only(bottom: 8),
                child: Row(
                  children: [
                    Expanded(
                      flex: 3,
                      child: Text(
                        admin.name,
                        style: const TextStyle(fontSize: 12),
                        overflow: TextOverflow.ellipsis,
                      ),
                    ),
                    Expanded(
                      flex: 2,
                      child: Text(
                        '$totalWork بلاغ',
                        style: const TextStyle(
                          fontSize: 12,
                          fontWeight: FontWeight.w600,
                        ),
                        textAlign: TextAlign.end,
                      ),
                    ),
                  ],
                ),
              );
            }).toList(),
        ],
      ),
    );
  }

  Widget _buildCompletionRateDistribution(
      BuildContext context, SuperAdminLoaded state) {
    final regularAdmins = state.admins.where((a) => a.role == 'admin').toList();

    return Container(
      padding: const EdgeInsets.all(20),
      decoration: BoxDecoration(
        borderRadius: BorderRadius.circular(16),
        color: Theme.of(context).brightness == Brightness.dark
            ? const Color(0xFF1E293B)
            : Colors.white,
        border: Border.all(color: const Color(0xFFE2E8F0)),
        boxShadow: [
          BoxShadow(
            color: Colors.black.withOpacity(0.05),
            blurRadius: 10,
            offset: const Offset(0, 4),
          ),
        ],
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Text(
            'معدلات الإنجاز',
            style: Theme.of(context).textTheme.titleMedium?.copyWith(
                  fontWeight: FontWeight.w600,
                  fontSize: 14,
                ),
          ),
          const SizedBox(height: 16),
          if (regularAdmins.isEmpty)
            const Center(
              child: Text(
                'لا يوجد مسؤولين',
                style: TextStyle(color: Color(0xFF64748B)),
              ),
            )
          else
            ...regularAdmins.map((admin) {
              final stats = state.adminStats[admin.id] ?? <String, dynamic>{};
              final completionRate = stats['completion_rate'] as double? ?? 0.0;
              final percentageRate =
                  completionRate * 100; // Convert to percentage for display
              return Padding(
                padding: const EdgeInsets.only(bottom: 8),
                child: Row(
                  children: [
                    Expanded(
                      flex: 3,
                      child: Text(
                        admin.name,
                        style: const TextStyle(fontSize: 12),
                        overflow: TextOverflow.ellipsis,
                      ),
                    ),
                    Expanded(
                      flex: 2,
                      child: Row(
                        mainAxisAlignment: MainAxisAlignment.end,
                        children: [
                          Container(
                            padding: const EdgeInsets.symmetric(
                              horizontal: 6,
                              vertical: 2,
                            ),
                            decoration: BoxDecoration(
                              borderRadius: BorderRadius.circular(4),
                              color: _getCompletionRateColor(percentageRate)
                                  .withOpacity(0.1),
                            ),
                            child: Text(
                              '${percentageRate.toStringAsFixed(0)}%',
                              style: TextStyle(
                                fontSize: 11,
                                fontWeight: FontWeight.w600,
                                color: _getCompletionRateColor(percentageRate),
                              ),
                            ),
                          ),
                        ],
                      ),
                    ),
                  ],
                ),
              );
            }).toList(),
        ],
      ),
    );
  }

  Widget _buildMiniStatCard(String label, int value, Color color) {
    return Expanded(
      child: Container(
        padding: const EdgeInsets.symmetric(vertical: 8, horizontal: 8),
        decoration: BoxDecoration(
          borderRadius: BorderRadius.circular(8),
          color: color.withOpacity(0.1),
        ),
        child: Column(
          children: [
            Text(
              '$value',
              style: TextStyle(
                fontSize: 14,
                fontWeight: FontWeight.w700,
                color: color,
              ),
            ),
            Text(
              label,
              style: TextStyle(
                fontSize: 10,
                color: color,
                fontWeight: FontWeight.w500,
              ),
            ),
          ],
        ),
      ),
    );
  }

  Color _getCompletionRateColor(double rate) {
    if (rate >= 80) return const Color(0xFF10B981);
    if (rate >= 60) return const Color(0xFFF59E0B);
    return const Color(0xFFEF4444);
  }

  Widget _buildModernStatsCard(
      String label, int count, IconData icon, Color color, VoidCallback onTap) {
    return StatefulBuilder(
      builder: (context, setState) {
        bool isHovered = false;

        return MouseRegion(
          onEnter: (_) => setState(() => isHovered = true),
          onExit: (_) => setState(() => isHovered = false),
          child: AnimatedContainer(
            duration: const Duration(milliseconds: 200),
            transform: Matrix4.identity()..scale(isHovered ? 1.02 : 1.0),
            decoration: BoxDecoration(
              borderRadius: BorderRadius.circular(20),
              gradient: LinearGradient(
                begin: Alignment.topLeft,
                end: Alignment.bottomRight,
                colors: Theme.of(context).brightness == Brightness.dark
                    ? [
                        const Color(0xFF1E293B).withOpacity(0.9),
                        const Color(0xFF1E293B).withOpacity(0.7),
                      ]
                    : [
                        Colors.white.withOpacity(0.9),
                        Colors.white.withOpacity(0.7),
                      ],
              ),
              border: Border.all(
                color: isHovered
                    ? color.withOpacity(0.3)
                    : Colors.white.withOpacity(0.2),
                width: 1.5,
              ),
              boxShadow: [
                BoxShadow(
                  color: color.withOpacity(isHovered ? 0.15 : 0.08),
                  blurRadius: isHovered ? 16 : 10,
                  offset: const Offset(0, 6),
                  spreadRadius: 0,
                ),
              ],
            ),
            child: InkWell(
              onTap: onTap,
              child: Container(
                padding: const EdgeInsets.all(20),
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Row(
                      mainAxisAlignment: MainAxisAlignment.spaceBetween,
                      children: [
                        Container(
                          width: 40,
                          height: 40,
                          decoration: BoxDecoration(
                            borderRadius: BorderRadius.circular(12),
                            gradient: LinearGradient(
                              begin: Alignment.topLeft,
                              end: Alignment.bottomRight,
                              colors: [
                                color.withOpacity(0.2),
                                color.withOpacity(0.1),
                              ],
                            ),
                            border: Border.all(
                              color: color.withOpacity(0.2),
                              width: 1,
                            ),
                          ),
                          child: Icon(
                            icon,
                            color: color,
                            size: 20,
                          ),
                        ),
                        AnimatedContainer(
                          duration: const Duration(milliseconds: 200),
                          child: Icon(
                            Icons.arrow_outward_rounded,
                            color: color.withOpacity(isHovered ? 1.0 : 0.6),
                            size: 16,
                          ),
                        ),
                      ],
                    ),
                    const Spacer(),
                    Text(
                      '$count',
                      style: Theme.of(context).textTheme.titleLarge?.copyWith(
                            fontWeight: FontWeight.w700,
                            fontSize: 24,
                            color:
                                Theme.of(context).brightness == Brightness.dark
                                    ? const Color(0xFFF1F5F9)
                                    : const Color(0xFF1E293B),
                            letterSpacing: -0.6,
                            height: 1.1,
                          ),
                    ),
                    const SizedBox(height: 4),
                    Text(
                      label,
                      style: Theme.of(context).textTheme.bodySmall?.copyWith(
                            color:
                                Theme.of(context).brightness == Brightness.dark
                                    ? const Color(0xFF94A3B8)
                                    : const Color(0xFF64748B),
                            fontWeight: FontWeight.w500,
                            height: 1.2,
                          ),
                      maxLines: 2,
                      overflow: TextOverflow.ellipsis,
                    ),
                  ],
                ),
              ),
            ),
          ),
        );
      },
    );
  }

  Widget _buildAdminManagementSection(
      BuildContext context, SuperAdminLoaded state) {
    // Separate super admins from regular admins
    final superAdmins =
        state.admins.where((admin) => admin.role == 'super_admin').toList();
    final regularAdmins =
        state.admins.where((admin) => admin.role == 'admin').toList();

    return Column(
      children: [
        // Header with action buttons
        _buildAdminManagementHeader(context),
        const SizedBox(height: 20),

        // Responsive layout for admin sections
        LayoutBuilder(
          builder: (context, constraints) {
            if (constraints.maxWidth > 1200) {
              // Large screens: Side by side layout
              return Row(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  Flexible(
                    flex: 3,
                    child:
                        _buildSuperAdminsSection(context, superAdmins, state),
                  ),
                  const SizedBox(width: 20),
                  Flexible(
                    flex: 4,
                    child: _buildRegularAdminsSection(
                        context, regularAdmins, state),
                  ),
                ],
              );
            } else {
              // Small/Medium screens: Stacked layout
              return Column(
                children: [
                  _buildSuperAdminsSection(context, superAdmins, state),
                  const SizedBox(height: 20),
                  _buildRegularAdminsSection(context, regularAdmins, state),
                ],
              );
            }
          },
        ),
      ],
    );
  }

  Widget _buildAdminManagementHeader(BuildContext context) {
    return Container(
      padding: const EdgeInsets.all(20),
      decoration: BoxDecoration(
        borderRadius: BorderRadius.circular(16),
        gradient: LinearGradient(
          begin: Alignment.topLeft,
          end: Alignment.bottomRight,
          colors: [
            const Color(0xFF6B46C1).withOpacity(0.1),
            const Color(0xFF8B5CF6).withOpacity(0.05),
          ],
        ),
        border: Border.all(
          color: const Color(0xFF6B46C1).withOpacity(0.2),
          width: 1.5,
        ),
        boxShadow: [
          BoxShadow(
            color: const Color(0xFF6B46C1).withOpacity(0.1),
            blurRadius: 20,
            offset: const Offset(0, 8),
          ),
        ],
      ),
      child: Row(
        children: [
          Container(
            padding: const EdgeInsets.all(16),
            decoration: BoxDecoration(
              gradient: LinearGradient(
                begin: Alignment.topLeft,
                end: Alignment.bottomRight,
                colors: [
                  const Color(0xFF6B46C1).withOpacity(0.2),
                  const Color(0xFF8B5CF6).withOpacity(0.1),
                ],
              ),
              borderRadius: BorderRadius.circular(16),
              border: Border.all(
                color: const Color(0xFF6B46C1).withOpacity(0.3),
                width: 1,
              ),
            ),
            child: const Icon(
              Icons.admin_panel_settings_rounded,
              size: 22,
              color: Color(0xFF6B46C1),
            ),
          ),
          const SizedBox(width: 20),
          Expanded(
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Text(
                  'إدارة المسؤولين والمسؤولين',
                  style: Theme.of(context).textTheme.titleMedium?.copyWith(
                        fontWeight: FontWeight.w700,
                        fontSize: 18,
                        color: Theme.of(context).brightness == Brightness.dark
                            ? Colors.white
                            : const Color(0xFF1E293B),
                        letterSpacing: -0.3,
                      ),
                ),
                const SizedBox(height: 6),
                Text(
                  'إنشاء وتحرير وحذف حسابات المسؤولين والمسؤولين العامين',
                  style: Theme.of(context).textTheme.bodySmall?.copyWith(
                        fontSize: 13,
                        color: const Color(0xFF64748B),
                        fontWeight: FontWeight.w400,
                      ),
                ),
              ],
            ),
          ),
          const SizedBox(width: 16),
          _buildGradientButton(
            context,
            'إضافة مسؤول جديد',
            Icons.add_rounded,
            const Color(0xFF10B981),
            () => _showCreateAdminDialog(context),
          ),
        ],
      ),
    );
  }

  Widget _buildGradientButton(
    BuildContext context,
    String text,
    IconData icon,
    Color color,
    VoidCallback onPressed,
  ) {
    return Container(
      decoration: BoxDecoration(
        borderRadius: BorderRadius.circular(14),
        gradient: LinearGradient(
          begin: Alignment.topLeft,
          end: Alignment.bottomRight,
          colors: [
            color,
            color.withOpacity(0.8),
          ],
        ),
        boxShadow: [
          BoxShadow(
            color: color.withOpacity(0.3),
            blurRadius: 12,
            offset: const Offset(0, 4),
          ),
        ],
      ),
      child: Material(
        color: Colors.transparent,
        child: InkWell(
          onTap: onPressed,
          borderRadius: BorderRadius.circular(14),
          child: Padding(
            padding: const EdgeInsets.symmetric(horizontal: 20, vertical: 14),
            child: Row(
              mainAxisSize: MainAxisSize.min,
              children: [
                Icon(icon, color: Colors.white, size: 18),
                const SizedBox(width: 8),
                Text(
                  text,
                  style: const TextStyle(
                    color: Colors.white,
                    fontWeight: FontWeight.w600,
                    fontSize: 14,
                  ),
                ),
              ],
            ),
          ),
        ),
      ),
    );
  }

  Widget _buildSuperAdminsSection(
      BuildContext context, List<Admin> superAdmins, SuperAdminLoaded state) {
    return Container(
      padding: const EdgeInsets.all(20),
      decoration: BoxDecoration(
        borderRadius: BorderRadius.circular(16),
        gradient: LinearGradient(
          begin: Alignment.topLeft,
          end: Alignment.bottomRight,
          colors: [
            const Color(0xFF8B5CF6).withOpacity(0.1),
            const Color(0xFF6B46C1).withOpacity(0.05),
          ],
        ),
        border: Border.all(
          color: const Color(0xFF8B5CF6).withOpacity(0.2),
          width: 1.5,
        ),
        boxShadow: [
          BoxShadow(
            color: const Color(0xFF8B5CF6).withOpacity(0.1),
            blurRadius: 20,
            offset: const Offset(0, 8),
          ),
        ],
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Row(
            children: [
              Container(
                padding: const EdgeInsets.all(10),
                decoration: BoxDecoration(
                  gradient: LinearGradient(
                    begin: Alignment.topLeft,
                    end: Alignment.bottomRight,
                    colors: [
                      const Color(0xFF8B5CF6).withOpacity(0.2),
                      const Color(0xFF6B46C1).withOpacity(0.1),
                    ],
                  ),
                  borderRadius: BorderRadius.circular(12),
                  border: Border.all(
                    color: const Color(0xFF8B5CF6).withOpacity(0.3),
                    width: 1,
                  ),
                ),
                child: const Icon(
                  Icons.shield_rounded,
                  color: Color(0xFF8B5CF6),
                  size: 20,
                ),
              ),
              const SizedBox(width: 12),
              Expanded(
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Text(
                      'المسؤولين العامين',
                      style: Theme.of(context).textTheme.titleSmall?.copyWith(
                            fontWeight: FontWeight.w700,
                            fontSize: 15,
                            color: const Color(0xFF8B5CF6),
                            letterSpacing: -0.2,
                          ),
                    ),
                    Text(
                      '${superAdmins.length} مدير عام',
                      style: Theme.of(context).textTheme.bodySmall?.copyWith(
                            fontSize: 12,
                            color: const Color(0xFF64748B),
                            fontWeight: FontWeight.w500,
                          ),
                    ),
                  ],
                ),
              ),
            ],
          ),
          const SizedBox(height: 20),
          if (superAdmins.isEmpty)
            _buildEmptyStateCard(
              'لا يوجد مديرين عامين',
              'لم يتم إنشاء أي حساب مدير عام بعد',
              Icons.shield_outlined,
              const Color(0xFF8B5CF6),
            )
          else
            Column(
              children: superAdmins.map((admin) {
                final stats = state.adminStats[admin.id] ?? {};
                return Container(
                  margin: const EdgeInsets.only(bottom: 12),
                  child: _AdminManagementCard(
                    admin: admin,
                    stats: stats,
                    allSupervisors: state.allSupervisors,
                  ),
                );
              }).toList(),
            ),
        ],
      ),
    );
  }

  Widget _buildRegularAdminsSection(
      BuildContext context, List<Admin> regularAdmins, SuperAdminLoaded state) {
    return Container(
      padding: const EdgeInsets.all(20),
      decoration: BoxDecoration(
        borderRadius: BorderRadius.circular(16),
        gradient: LinearGradient(
          begin: Alignment.topLeft,
          end: Alignment.bottomRight,
          colors: Theme.of(context).brightness == Brightness.dark
              ? [
                  const Color(0xFF1E293B).withOpacity(0.9),
                  const Color(0xFF1E293B).withOpacity(0.7),
                ]
              : [
                  Colors.white.withOpacity(0.9),
                  Colors.white.withOpacity(0.7),
                ],
        ),
        border: Border.all(
          color: Colors.white.withOpacity(0.2),
          width: 1.5,
        ),
        boxShadow: [
          BoxShadow(
            color: const Color(0xFF1E293B).withOpacity(0.1),
            blurRadius: 20,
            offset: const Offset(0, 8),
          ),
        ],
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Row(
            children: [
              Container(
                padding: const EdgeInsets.all(10),
                decoration: BoxDecoration(
                  gradient: LinearGradient(
                    begin: Alignment.topLeft,
                    end: Alignment.bottomRight,
                    colors: [
                      const Color(0xFF3B82F6).withOpacity(0.2),
                      const Color(0xFF1D4ED8).withOpacity(0.1),
                    ],
                  ),
                  borderRadius: BorderRadius.circular(12),
                  border: Border.all(
                    color: const Color(0xFF3B82F6).withOpacity(0.3),
                    width: 1,
                  ),
                ),
                child: const Icon(
                  Icons.people_rounded,
                  color: Color(0xFF3B82F6),
                  size: 20,
                ),
              ),
              const SizedBox(width: 12),
              Expanded(
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Text(
                      'المسؤولين العاديين',
                      style: Theme.of(context).textTheme.titleSmall?.copyWith(
                            fontWeight: FontWeight.w700,
                            fontSize: 15,
                            color: const Color(0xFF3B82F6),
                            letterSpacing: -0.2,
                          ),
                    ),
                    Text(
                      '${regularAdmins.length} مسؤول',
                      style: Theme.of(context).textTheme.bodySmall?.copyWith(
                            fontSize: 12,
                            color: const Color(0xFF64748B),
                            fontWeight: FontWeight.w500,
                          ),
                    ),
                  ],
                ),
              ),
            ],
          ),
          const SizedBox(height: 20),
          if (regularAdmins.isEmpty)
            _buildEmptyStateCard(
              'لا يوجد مسؤولين',
              'ابدأ بإضافة مسؤولين لإدارة المشرفين',
              Icons.person_add_outlined,
              const Color(0xFF3B82F6),
            )
          else
            Column(
              children: regularAdmins.map((admin) {
                final stats = state.adminStats[admin.id] ?? <String, dynamic>{};
                return Container(
                  margin: const EdgeInsets.only(bottom: 12),
                  child: _AdminManagementCard(
                    admin: admin,
                    stats: stats,
                    allSupervisors: state.allSupervisors,
                  ),
                );
              }).toList(),
            ),
        ],
      ),
    );
  }

  Widget _buildEmptyStateCard(
      String title, String subtitle, IconData icon, Color color) {
    return Container(
      padding: const EdgeInsets.all(24),
      decoration: BoxDecoration(
        borderRadius: BorderRadius.circular(16),
        color: color.withOpacity(0.05),
        border: Border.all(
          color: color.withOpacity(0.1),
          style: BorderStyle.solid,
        ),
      ),
      child: Column(
        children: [
          Container(
            padding: const EdgeInsets.all(16),
            decoration: BoxDecoration(
              color: color.withOpacity(0.1),
              borderRadius: BorderRadius.circular(12),
            ),
            child: Icon(
              icon,
              size: 24,
              color: color,
            ),
          ),
          const SizedBox(height: 16),
          Text(
            title,
            style: TextStyle(
              fontSize: 14,
              fontWeight: FontWeight.w600,
              color: color,
            ),
            textAlign: TextAlign.center,
          ),
          const SizedBox(height: 8),
          Text(
            subtitle,
            style: const TextStyle(
              fontSize: 12,
              color: Color(0xFF64748B),
            ),
            textAlign: TextAlign.center,
          ),
        ],
      ),
    );
  }

  Widget _buildEmptyAdminsState() {
    return Container(
      padding: const EdgeInsets.all(32),
      decoration: BoxDecoration(
        borderRadius: BorderRadius.circular(16),
        color: const Color(0xFFF8FAFC),
        border: Border.all(
          color: const Color(0xFFE2E8F0),
          style: BorderStyle.solid,
        ),
      ),
      child: Column(
        children: [
          Container(
            padding: const EdgeInsets.all(16),
            decoration: BoxDecoration(
              color: const Color(0xFF6B46C1).withOpacity(0.1),
              borderRadius: BorderRadius.circular(12),
            ),
            child: const Icon(
              Icons.admin_panel_settings_outlined,
              size: 32,
              color: Color(0xFF6B46C1),
            ),
          ),
          const SizedBox(height: 16),
          const Text(
            'لا يوجد مسؤولين بعد',
            style: TextStyle(
              fontSize: 18,
              fontWeight: FontWeight.w600,
              color: Color(0xFF1E293B),
            ),
          ),
          const SizedBox(height: 8),
          const Text(
            'ابدأ بإضافة مسؤول جديد لإدارة النظام',
            style: TextStyle(
              fontSize: 14,
              color: Color(0xFF64748B),
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildSupervisorAssignmentSection(
      BuildContext context, SuperAdminLoaded state) {
    final unassignedSupervisors =
        state.allSupervisors.where((s) => s['admin_id'] == null).toList();

    return Container(
      padding: const EdgeInsets.all(20),
      decoration: BoxDecoration(
        borderRadius: BorderRadius.circular(16),
        gradient: LinearGradient(
          begin: Alignment.topLeft,
          end: Alignment.bottomRight,
          colors: Theme.of(context).brightness == Brightness.dark
              ? [
                  const Color(0xFF1E293B).withOpacity(0.9),
                  const Color(0xFF1E293B).withOpacity(0.7),
                ]
              : [
                  Colors.white.withOpacity(0.9),
                  Colors.white.withOpacity(0.7),
                ],
        ),
        border: Border.all(
          color: Colors.white.withOpacity(0.2),
          width: 1,
        ),
        boxShadow: [
          BoxShadow(
            color: const Color(0xFF1E293B).withOpacity(0.1),
            blurRadius: 20,
            offset: const Offset(0, 8),
          ),
        ],
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Row(
            children: [
              Container(
                padding: const EdgeInsets.all(10),
                decoration: BoxDecoration(
                  color: const Color(0xFFF59E0B).withOpacity(0.1),
                  borderRadius: BorderRadius.circular(12),
                ),
                child: const Icon(
                  Icons.assignment_outlined,
                  color: Color(0xFFF59E0B),
                  size: 20,
                ),
              ),
              const SizedBox(width: 16),
              Expanded(
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Text(
                      'المشرفين غير المُعيّنين',
                      style: Theme.of(context).textTheme.titleMedium?.copyWith(
                            fontWeight: FontWeight.w700,
                            fontSize: 16,
                            color:
                                Theme.of(context).brightness == Brightness.dark
                                    ? Colors.white
                                    : const Color(0xFF1E293B),
                            letterSpacing: -0.3,
                          ),
                    ),
                    const SizedBox(height: 4),
                    Text(
                      '${unassignedSupervisors.length} مشرف في انتظار التعيين',
                      style: Theme.of(context).textTheme.bodySmall?.copyWith(
                            fontSize: 12,
                            color: const Color(0xFF64748B),
                            fontWeight: FontWeight.w400,
                          ),
                    ),
                  ],
                ),
              ),
            ],
          ),
          const SizedBox(height: 20),
          if (unassignedSupervisors.isEmpty)
            _buildNoUnassignedSupervisorsState()
          else
            _buildUnassignedSupervisorsList(unassignedSupervisors),
        ],
      ),
    );
  }

  Widget _buildNoUnassignedSupervisorsState() {
    return Container(
      padding: const EdgeInsets.all(24),
      decoration: BoxDecoration(
        borderRadius: BorderRadius.circular(12),
        color: const Color(0xFF10B981).withOpacity(0.1),
        border: Border.all(
          color: const Color(0xFF10B981).withOpacity(0.2),
        ),
      ),
      child: Row(
        children: [
          Container(
            padding: const EdgeInsets.all(8),
            decoration: BoxDecoration(
              color: const Color(0xFF10B981).withOpacity(0.2),
              borderRadius: BorderRadius.circular(8),
            ),
            child: const Icon(
              Icons.check_circle_outline,
              color: Color(0xFF10B981),
              size: 20,
            ),
          ),
          const SizedBox(width: 12),
          const Expanded(
            child: Text(
              'جميع المشرفين تم تعيينهم للمسؤولين',
              style: TextStyle(
                fontSize: 14,
                fontWeight: FontWeight.w500,
                color: Color(0xFF10B981),
              ),
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildUnassignedSupervisorsList(
      List<Map<String, dynamic>> supervisors) {
    return Column(
      children: supervisors.take(5).map((supervisor) {
        return Container(
          margin: const EdgeInsets.only(bottom: 8),
          padding: const EdgeInsets.all(16),
          decoration: BoxDecoration(
            borderRadius: BorderRadius.circular(12),
            color: const Color(0xFFF59E0B).withOpacity(0.1),
            border: Border.all(
              color: const Color(0xFFF59E0B).withOpacity(0.2),
            ),
          ),
          child: Row(
            children: [
              Container(
                width: 40,
                height: 40,
                decoration: BoxDecoration(
                  color: const Color(0xFFF59E0B).withOpacity(0.2),
                  borderRadius: BorderRadius.circular(10),
                ),
                child: const Icon(
                  Icons.person_outline,
                  color: Color(0xFFF59E0B),
                  size: 20,
                ),
              ),
              const SizedBox(width: 12),
              Expanded(
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Text(
                      supervisor['username'] ?? 'غير محدد',
                      style: const TextStyle(
                        fontSize: 14,
                        fontWeight: FontWeight.w600,
                        color: Color(0xFF1E293B),
                      ),
                    ),
                    if (supervisor['email'] != null)
                      Text(
                        supervisor['email'],
                        style: const TextStyle(
                          fontSize: 12,
                          color: Color(0xFF64748B),
                        ),
                      ),
                  ],
                ),
              ),
            ],
          ),
        );
      }).toList(),
    );
  }
}

class _AdminManagementCard extends StatelessWidget {
  final Admin admin;
  final Map<String, dynamic> stats;
  final List<Map<String, dynamic>> allSupervisors;

  const _AdminManagementCard({
    required this.admin,
    required this.stats,
    required this.allSupervisors,
  });

  @override
  Widget build(BuildContext context) {
    final assignedSupervisors =
        allSupervisors.where((s) => s['admin_id'] == admin.id).toList();
    final supervisorCount = stats['supervisors'] ?? 0;
    final reportCount = stats['reports'] ?? 0;
    final maintenanceCount = stats['maintenance'] ?? 0;

    return Card(
      margin: const EdgeInsets.only(bottom: 12),
      child: ExpansionTile(
        leading: CircleAvatar(
          backgroundColor:
              admin.role == 'super_admin' ? Colors.purple : Colors.blue,
          child: Text(
            admin.name.isNotEmpty ? admin.name[0].toUpperCase() : 'A',
            style: const TextStyle(
                color: Colors.white, fontWeight: FontWeight.bold),
          ),
        ),
        title: Row(
          children: [
            Text(admin.name,
                style: const TextStyle(
                  fontWeight: FontWeight.w600,
                  fontSize: 15,
                )),
            const SizedBox(width: 8),
            if (admin.role == 'super_admin')
              Container(
                padding: const EdgeInsets.symmetric(horizontal: 8, vertical: 2),
                decoration: BoxDecoration(
                  color: Colors.purple,
                  borderRadius: BorderRadius.circular(12),
                ),
                child: const Text(
                  'مدير عام',
                  style: TextStyle(color: Colors.white, fontSize: 10),
                ),
              ),
          ],
        ),
        subtitle: Text(
          '${admin.email} • $supervisorCount مشرف • $reportCount بلاغ',
          style: const TextStyle(fontSize: 12),
        ),
        trailing: PopupMenuButton(
          itemBuilder: (context) => [
            PopupMenuItem(
              child: const Row(
                children: [
                  Icon(Icons.people_alt),
                  SizedBox(width: 8),
                  Text('تعيين مشرفين')
                ],
              ),
              onTap: () => _showAssignSupervisorsDialog(context, admin),
            ),
            if (admin.role != 'super_admin')
              PopupMenuItem(
                child: const Row(
                  children: [
                    Icon(Icons.delete, color: Colors.red),
                    SizedBox(width: 8),
                    Text('حذف')
                  ],
                ),
                onTap: () => _confirmDeleteAdmin(context, admin),
              ),
          ],
        ),
        children: [
          Padding(
            padding: const EdgeInsets.all(16),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Row(
                  children: [
                    Expanded(
                      child: _buildStatCard(
                          'المشرفين', supervisorCount.toString(), Colors.blue),
                    ),
                    const SizedBox(width: 8),
                    Expanded(
                      child: _buildStatCard(
                          'البلاغات', reportCount.toString(), Colors.green),
                    ),
                    const SizedBox(width: 8),
                    Expanded(
                      child: _buildStatCard('الصيانة',
                          maintenanceCount.toString(), Colors.orange),
                    ),
                  ],
                ),
                const SizedBox(height: 16),
                const Text('المشرفين المعينين:',
                    style: TextStyle(
                      fontWeight: FontWeight.w600,
                      fontSize: 13,
                    )),
                const SizedBox(height: 8),
                if (assignedSupervisors.isEmpty)
                  const Text('لا يوجد مشرفين معينين')
                else
                  ...assignedSupervisors.map((supervisor) => Padding(
                        padding: const EdgeInsets.symmetric(vertical: 2),
                        child: Row(
                          children: [
                            const Icon(Icons.person,
                                size: 16, color: Colors.grey),
                            const SizedBox(width: 8),
                            Text(supervisor['username'] ?? 'غير معروف'),
                            const Spacer(),
                            Text(
                              supervisor['email'] ?? '',
                              style: const TextStyle(
                                  color: Colors.grey, fontSize: 12),
                            ),
                          ],
                        ),
                      )),
              ],
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildStatCard(String title, String value, Color color) {
    return Container(
      padding: const EdgeInsets.all(12),
      decoration: BoxDecoration(
        color: color.withOpacity(0.1),
        borderRadius: BorderRadius.circular(8),
        border: Border.all(color: color.withOpacity(0.3)),
      ),
      child: Column(
        children: [
          Text(
            value,
            style: TextStyle(
                fontSize: 18, fontWeight: FontWeight.bold, color: color),
          ),
          const SizedBox(height: 4),
          Text(title, style: const TextStyle(fontSize: 12, color: Colors.grey)),
        ],
      ),
    );
  }

  void _showAssignSupervisorsDialog(BuildContext context, Admin admin) {
    final unassignedSupervisors =
        allSupervisors.where((s) => s['admin_id'] == null).toList();

    showDialog(
      context: context,
      builder: (dialogContext) => BlocProvider.value(
        value: context.read<SuperAdminBloc>(),
        child: _AssignSupervisorsDialog(
            admin: admin, unassignedSupervisors: unassignedSupervisors),
      ),
    );
  }

  void _confirmDeleteAdmin(BuildContext context, Admin admin) {
    showDialog(
      context: context,
      builder: (dialogContext) => AlertDialog(
        title: const Text('تأكيد الحذف'),
        content: Text(
            'هل أنت متأكد من حذف المسؤول "${admin.name}"؟\nسيتم إلغاء تعيين جميع المشرفين المرتبطين به.'),
        actions: [
          TextButton(
            onPressed: () => Navigator.of(dialogContext).pop(),
            child: const Text('إلغاء'),
          ),
          TextButton(
            onPressed: () {
              Navigator.of(dialogContext).pop();
              context.read<SuperAdminBloc>().add(DeleteAdminEvent(admin.id));
            },
            style: TextButton.styleFrom(foregroundColor: Colors.red),
            child: const Text('حذف'),
          ),
        ],
      ),
    );
  }
}

class _CreateAdminDialog extends StatefulWidget {
  const _CreateAdminDialog();

  @override
  State<_CreateAdminDialog> createState() => _CreateAdminDialogState();
}

class _CreateAdminDialogState extends State<_CreateAdminDialog> {
  final _formKey = GlobalKey<FormState>();
  final _nameController = TextEditingController();
  final _emailController = TextEditingController();
  final _passwordOrIdController = TextEditingController();
  String _selectedRole = 'admin';
  bool _useAutomaticCreation = true;

  @override
  Widget build(BuildContext context) {
    return AlertDialog(
      title: const Text('إضافة مسؤول جديد'),
      content: SizedBox(
        width: 500,
        child: Form(
          key: _formKey,
          child: Column(
            mainAxisSize: MainAxisSize.min,
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              // Method selection
              Container(
                padding: const EdgeInsets.all(12),
                decoration: BoxDecoration(
                  color: Colors.purple.withOpacity(0.1),
                  borderRadius: BorderRadius.circular(8),
                  border: Border.all(color: Colors.purple.withOpacity(0.3)),
                ),
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    const Text(
                      '🚀 طريقة إنشاء المسؤول:',
                      style: TextStyle(
                          fontWeight: FontWeight.bold, color: Colors.purple),
                    ),
                    const SizedBox(height: 8),
                    Row(
                      children: [
                        Expanded(
                          child: RadioListTile<bool>(
                            title: const Text('إنشاء تلقائي'),
                            subtitle: const Text('إنشاء كامل من التطبيق'),
                            value: true,
                            groupValue: _useAutomaticCreation,
                            onChanged: (value) =>
                                setState(() => _useAutomaticCreation = value!),
                            dense: true,
                          ),
                        ),
                        Expanded(
                          child: RadioListTile<bool>(
                            title: const Text('إنشاء يدوي'),
                            subtitle: const Text('باستخدام UUID من Supabase'),
                            value: false,
                            groupValue: _useAutomaticCreation,
                            onChanged: (value) =>
                                setState(() => _useAutomaticCreation = value!),
                            dense: true,
                          ),
                        ),
                      ],
                    ),
                  ],
                ),
              ),
              const SizedBox(height: 16),

              // Instructions based on method
              if (!_useAutomaticCreation)
                Container(
                  padding: const EdgeInsets.all(12),
                  decoration: BoxDecoration(
                    color: Colors.blue.withOpacity(0.1),
                    borderRadius: BorderRadius.circular(8),
                    border: Border.all(color: Colors.blue.withOpacity(0.3)),
                  ),
                  child: const Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      Text(
                        '📋 خطوات الإنشاء اليدوي:',
                        style: TextStyle(
                            fontWeight: FontWeight.bold, color: Colors.blue),
                      ),
                      SizedBox(height: 8),
                      Text(
                          '1. اذهب إلى Supabase Dashboard → Authentication → Users'),
                      Text(
                          '2. اضغط "Add User" وأدخل البريد الإلكتروني وكلمة المرور'),
                      Text('3. انسخ User ID (UUID) من المستخدم المُنشأ'),
                      Text(
                          '4. أدخل البيانات أدناه واستخدم نفس البريد الإلكتروني'),
                    ],
                  ),
                ),

              if (_useAutomaticCreation)
                Container(
                  padding: const EdgeInsets.all(12),
                  decoration: BoxDecoration(
                    color: Colors.green.withOpacity(0.1),
                    borderRadius: BorderRadius.circular(8),
                    border: Border.all(color: Colors.green.withOpacity(0.3)),
                  ),
                  child: const Row(
                    children: [
                      Icon(Icons.check_circle, color: Colors.green, size: 20),
                      SizedBox(width: 8),
                      Expanded(
                        child: Text(
                          '✨ سيتم إنشاء المستخدم والمسؤول تلقائياً من التطبيق!',
                          style: TextStyle(
                              color: Colors.green, fontWeight: FontWeight.bold),
                        ),
                      ),
                    ],
                  ),
                ),

              const SizedBox(height: 16),

              // Form fields
              TextFormField(
                controller: _nameController,
                decoration: const InputDecoration(
                  labelText: 'اسم المسؤول *',
                  border: OutlineInputBorder(),
                  prefixIcon: Icon(Icons.person),
                ),
                validator: (value) => value?.isEmpty == true ? 'مطلوب' : null,
              ),
              const SizedBox(height: 16),

              TextFormField(
                controller: _emailController,
                decoration: const InputDecoration(
                  labelText: 'البريد الإلكتروني *',
                  border: OutlineInputBorder(),
                  prefixIcon: Icon(Icons.email),
                  hintText: 'admin@example.com',
                ),
                validator: (value) {
                  if (value?.isEmpty == true) return 'مطلوب';
                  if (!value!.contains('@')) return 'بريد إلكتروني غير صحيح';
                  return null;
                },
              ),
              const SizedBox(height: 16),

              DropdownButtonFormField<String>(
                value: _selectedRole,
                decoration: const InputDecoration(
                  labelText: 'دور المسؤول',
                  border: OutlineInputBorder(),
                  prefixIcon: Icon(Icons.security),
                ),
                items: const [
                  DropdownMenuItem(value: 'admin', child: Text('مسؤول')),
                  DropdownMenuItem(
                      value: 'super_admin', child: Text('مدير عام')),
                ],
                onChanged: (value) => setState(() => _selectedRole = value!),
              ),
              const SizedBox(height: 16),

              TextFormField(
                controller: _passwordOrIdController,
                decoration: InputDecoration(
                  labelText: _useAutomaticCreation
                      ? 'كلمة المرور *'
                      : 'معرف المستخدم من Supabase Auth *',
                  border: const OutlineInputBorder(),
                  prefixIcon:
                      Icon(_useAutomaticCreation ? Icons.lock : Icons.key),
                  hintText: _useAutomaticCreation
                      ? 'كلمة مرور قوية'
                      : 'xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx',
                ),
                obscureText: _useAutomaticCreation,
                validator: (value) {
                  if (value?.isEmpty == true) return 'مطلوب';
                  if (_useAutomaticCreation && value!.length < 6) {
                    return 'كلمة المرور يجب أن تكون 6 أحرف على الأقل';
                  }
                  if (!_useAutomaticCreation && value!.length < 30) {
                    return 'معرف غير صحيح';
                  }
                  return null;
                },
              ),

              if (!_useAutomaticCreation) ...[
                const SizedBox(height: 12),
                Container(
                  padding: const EdgeInsets.all(8),
                  decoration: BoxDecoration(
                    color: Colors.orange.withOpacity(0.1),
                    borderRadius: BorderRadius.circular(6),
                  ),
                  child: const Row(
                    children: [
                      Icon(Icons.info, color: Colors.orange, size: 16),
                      SizedBox(width: 8),
                      Expanded(
                        child: Text(
                          'تأكد من استخدام نفس البريد الإلكتروني المستخدم في Supabase Auth',
                          style: TextStyle(fontSize: 12, color: Colors.orange),
                        ),
                      ),
                    ],
                  ),
                ),
              ],
            ],
          ),
        ),
      ),
      actions: [
        TextButton(
          onPressed: () => Navigator.of(context).pop(),
          child: const Text('إلغاء'),
        ),
        ElevatedButton.icon(
          onPressed: _createAdmin,
          icon: const Icon(Icons.add),
          label: Text(_useAutomaticCreation ? 'إنشاء تلقائي' : 'إنشاء يدوي'),
          style: ElevatedButton.styleFrom(
              backgroundColor: _useAutomaticCreation
                  ? Colors.green
                  : const Color(0xFF6B46C1)),
        ),
      ],
    );
  }

  void _createAdmin() {
    if (_formKey.currentState?.validate() ?? false) {
      if (_useAutomaticCreation) {
        // Use automatic creation via Edge Function
        context.read<SuperAdminBloc>().add(CreateNewAdminComplete(
              name: _nameController.text.trim(),
              email: _emailController.text.trim(),
              password: _passwordOrIdController.text.trim(),
              role: _selectedRole,
            ));
      } else {
        // Use manual creation with auth user ID
        context.read<SuperAdminBloc>().add(CreateNewAdminManual(
              name: _nameController.text.trim(),
              email: _emailController.text.trim(),
              authUserId: _passwordOrIdController.text.trim(),
              role: _selectedRole,
            ));
      }
      Navigator.of(context).pop();
    }
  }
}

class _AssignSupervisorsDialog extends StatefulWidget {
  final Admin admin;
  final List<Map<String, dynamic>> unassignedSupervisors;

  const _AssignSupervisorsDialog({
    required this.admin,
    required this.unassignedSupervisors,
  });

  @override
  State<_AssignSupervisorsDialog> createState() =>
      _AssignSupervisorsDialogState();
}

class _AssignSupervisorsDialogState extends State<_AssignSupervisorsDialog> {
  List<String> selectedSupervisorIds = [];

  @override
  Widget build(BuildContext context) {
    return AlertDialog(
      title: Text('تعيين مشرفين للمسؤول ${widget.admin.name}'),
      content: SizedBox(
        width: 400,
        height: 300,
        child: widget.unassignedSupervisors.isEmpty
            ? const Center(child: Text('لا يوجد مشرفين غير معينين'))
            : ListView(
                children: widget.unassignedSupervisors.map((supervisor) {
                  final id = supervisor['id'] as String;
                  return CheckboxListTile(
                    title: Text(supervisor['username'] ?? 'غير معروف'),
                    subtitle: Text(supervisor['email'] ?? ''),
                    value: selectedSupervisorIds.contains(id),
                    onChanged: (selected) {
                      setState(() {
                        if (selected == true) {
                          selectedSupervisorIds.add(id);
                        } else {
                          selectedSupervisorIds.remove(id);
                        }
                      });
                    },
                  );
                }).toList(),
              ),
      ),
      actions: [
        TextButton(
          onPressed: () => Navigator.of(context).pop(),
          child: const Text('إلغاء'),
        ),
        ElevatedButton(
          onPressed: selectedSupervisorIds.isEmpty
              ? null
              : () {
                  context.read<SuperAdminBloc>().add(AssignSupervisorsToAdmin(
                        adminId: widget.admin.id,
                        supervisorIds: selectedSupervisorIds,
                      ));
                  Navigator.of(context).pop();
                },
          child: Text('تعيين (${selectedSupervisorIds.length})'),
        ),
      ],
    );
  }
}
